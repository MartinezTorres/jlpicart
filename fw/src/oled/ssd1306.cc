#include <board.h>
#include "ssd1306.h"

namespace I2C {

    namespace Private {

        static void sda_high() { gpio_set_dir( GPIO64_OLEDSDA, GPIO_IN ); };
        static void sda_low()  { gpio_set_dir( GPIO64_OLEDSDA, GPIO_OUT ); };
        static void scl_high() { gpio_set_dir( GPIO64_OLEDSCK, GPIO_IN ); };
        static void scl_low()  { gpio_set_dir( GPIO64_OLEDSCK, GPIO_OUT ); };

        static void init() {

            gpio_init(GPIO64_OLEDSCK); 
            gpio_set_drive_strength(GPIO64_OLEDSCK, GPIO_DRIVE_STRENGTH_8MA);
            gpio_set_slew_rate(GPIO64_OLEDSCK, GPIO_SLEW_RATE_FAST);
            gpio_put(GPIO64_OLEDSCK, false);
            scl_high();
            
            gpio_init(GPIO64_OLEDSDA);
            gpio_set_drive_strength(GPIO64_OLEDSDA, GPIO_DRIVE_STRENGTH_8MA);
            gpio_set_slew_rate(GPIO64_OLEDSDA, GPIO_SLEW_RATE_FAST);
            gpio_put(GPIO64_OLEDSDA, false);
            sda_high();
        }

        static void start() {

            busy_wait_us_32(4);
            sda_low();
            busy_wait_us_32(4);
            scl_low();
            busy_wait_us_32(4);
        }

        static int send_byte(uint8_t data) {

            for(uint8_t i=0; i<8; i++) {

                if (data & 0x80) {
                    sda_high();
                } else {
                    sda_low();
                }
                data <<= 1;

                busy_wait_us_32(1);
                scl_high();
                busy_wait_us_32(1);
                scl_low();
                busy_wait_us_32(1);
            }
            sda_high();
            busy_wait_us_32(1);
            scl_high();
            busy_wait_us_32(1);
            scl_low();
            busy_wait_us_32(1);
            return 0;
        }

        static void stop() {
            sda_low();
            busy_wait_us_32(4);
            scl_high();
            busy_wait_us_32(4);
            sda_high();
        }
        
        static int write(uint8_t address, const uint8_t *src, size_t len) {

            //auto interrupt_status = save_and_disable_interrupts();

            start();
            if (send_byte(address+address)) return -1;
            

            while (len--) 
                if ( send_byte(*src++) ) return -1;
            
            stop();

            //restore_interrupts(interrupt_status);
            
            return false;
        }

    }

    inline void init() { Private::init(); }

    inline bool write(uint8_t address, const uint8_t *src, size_t len) { return Private::write(address, src, len); }
}


// The SSD1306 is an OLED/PLED driver chip, capable of driving displays up to
// 128x64 pixels.

namespace SSD1306 {

    enum Size { HEIGHT = 32, WIDTH = 128 };

    namespace Private {

        static constexpr uint8_t font[256][8] = {
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //0
            {0x3C, 0x42, 0xA5, 0xA5, 0xC3, 0xBD, 0x42, 0x3C}, //1
            {0x3C, 0x7E, 0xDB, 0xDB, 0xBD, 0xC3, 0x7E, 0x3C}, //2
            {0x6C, 0xAA, 0x92, 0x44, 0x44, 0x28, 0x10, 0x00}, //3
            {0x10, 0x28, 0x44, 0x82, 0x44, 0x28, 0x10, 0x00}, //4
            {0x10, 0x38, 0x38, 0xD6, 0xFE, 0xD6, 0x38, 0x00}, //5
            {0x10, 0x38, 0x7C, 0x7C, 0xFE, 0xD6, 0x38, 0x00}, //6
            {0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00}, //7
            {0xFF, 0xFF, 0xFF, 0xE7, 0xE7, 0xFF, 0xFF, 0xFF}, //8
            {0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3C}, //9
            {0xC3, 0xBD, 0x7E, 0x7E, 0x7E, 0x7E, 0xBD, 0xC3}, //10
            {0x0C, 0x04, 0x08, 0x70, 0x88, 0x88, 0x70, 0x00}, //11
            {0x00, 0x70, 0x88, 0x88, 0x70, 0x20, 0x70, 0x20}, //12
            {0x20, 0x30, 0x28, 0x28, 0x20, 0xE0, 0xC0, 0x00}, //13
            {0x38, 0x3C, 0x24, 0x24, 0xE4, 0xDC, 0x18, 0x00}, //14
            {0x10, 0x44, 0x38, 0xAA, 0x38, 0x44, 0x10, 0x00}, //15
            {0x10, 0x10, 0x10, 0x38, 0x10, 0x10, 0x10, 0x10}, //16
            {0x10, 0x10, 0x10, 0xEF, 0x00, 0x00, 0x00, 0x00}, //17
            {0x00, 0x00, 0x00, 0xEF, 0x10, 0x10, 0x10, 0x10}, //18
            {0x10, 0x10, 0x10, 0xE0, 0x10, 0x10, 0x10, 0x10}, //19
            {0x10, 0x10, 0x10, 0x0F, 0x10, 0x10, 0x10, 0x10}, //20
            {0x10, 0x10, 0x10, 0xEF, 0x10, 0x10, 0x10, 0x10}, //21
            {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10}, //22
            {0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00}, //23
            {0x00, 0x00, 0x00, 0x0F, 0x10, 0x10, 0x10, 0x10}, //24
            {0x00, 0x00, 0x00, 0xE0, 0x10, 0x10, 0x10, 0x10}, //25
            {0x10, 0x10, 0x10, 0x0F, 0x00, 0x00, 0x00, 0x00}, //26
            {0x10, 0x10, 0x10, 0xE0, 0x00, 0x00, 0x00, 0x00}, //27
            {0x81, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x81}, //28
            {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}, //29
            {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01}, //30
            {0x00, 0x00, 0x10, 0xFF, 0x10, 0x00, 0x00, 0x00}, //31
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //32
            {0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00}, //33
            {0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //34
            {0x00, 0x50, 0xF8, 0x50, 0xF8, 0x50, 0x00, 0x00}, //35
            {0x20, 0x70, 0xA0, 0x70, 0x28, 0x70, 0x20, 0x00}, //36
            {0x00, 0xC8, 0xD0, 0x20, 0x58, 0x98, 0x00, 0x00}, //37
            {0x60, 0x90, 0x60, 0xA8, 0x98, 0x60, 0x00, 0x00}, //38
            {0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //39
            {0x20, 0x40, 0x40, 0x40, 0x40, 0x20, 0x00, 0x00}, //40
            {0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0x00, 0x00}, //41
            {0x00, 0x20, 0xA8, 0x70, 0x50, 0x88, 0x00, 0x00}, //42
            {0x00, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x00, 0x00}, //43
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00}, //44
            {0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00}, //45
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00}, //46
            {0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00}, //47
            {0x70, 0x88, 0xA8, 0xA8, 0x88, 0x70, 0x00, 0x00}, //48
            {0x20, 0x60, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00}, //49
            {0x70, 0x88, 0x08, 0x70, 0x80, 0xF8, 0x00, 0x00}, //50
            {0xF8, 0x08, 0x30, 0x08, 0x88, 0x70, 0x00, 0x00}, //51
            {0x10, 0x30, 0x50, 0xF8, 0x10, 0x10, 0x00, 0x00}, //52
            {0xF8, 0x80, 0x70, 0x08, 0x88, 0x70, 0x00, 0x00}, //53
            {0x30, 0x40, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00}, //54
            {0xF8, 0x88, 0x10, 0x20, 0x20, 0x20, 0x00, 0x00}, //55
            {0x70, 0x88, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00}, //56
            {0x70, 0x88, 0x88, 0x78, 0x08, 0x70, 0x00, 0x00}, //57
            {0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00}, //58
            {0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00}, //59
            {0x00, 0x18, 0x60, 0x80, 0x60, 0x18, 0x00, 0x00}, //60
            {0x00, 0x00, 0xF8, 0x00, 0xF8, 0x00, 0x00, 0x00}, //61
            {0x00, 0xC0, 0x30, 0x08, 0x30, 0xC0, 0x00, 0x00}, //62
            {0x70, 0x88, 0x30, 0x20, 0x00, 0x20, 0x00, 0x00}, //63
            {0x70, 0x88, 0x98, 0xA8, 0xA8, 0x98, 0x40, 0x00}, //64
            {0x70, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x00, 0x00}, //65
            {0xE0, 0x90, 0xE0, 0x90, 0x88, 0xF0, 0x00, 0x00}, //66
            {0x70, 0x88, 0x80, 0x80, 0x88, 0x70, 0x00, 0x00}, //67
            {0xF0, 0x48, 0x48, 0x48, 0x48, 0xF0, 0x00, 0x00}, //68
            {0xF8, 0x80, 0xE0, 0x80, 0x80, 0xF8, 0x00, 0x00}, //69
            {0xF8, 0x80, 0x80, 0xE0, 0x80, 0x80, 0x00, 0x00}, //70
            {0x70, 0x88, 0x80, 0xB8, 0x88, 0x70, 0x00, 0x00}, //71
            {0x88, 0x88, 0xF8, 0x88, 0x88, 0x88, 0x00, 0x00}, //72
            {0x70, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00}, //73
            {0x38, 0x08, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00}, //74
            {0x88, 0x90, 0xA0, 0xE0, 0x90, 0x88, 0x00, 0x00}, //75
            {0x80, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x00, 0x00}, //76
            {0xD8, 0xA8, 0xA8, 0x88, 0x88, 0x88, 0x00, 0x00}, //77
            {0xC8, 0xA8, 0xA8, 0x98, 0x98, 0x88, 0x00, 0x00}, //78
            {0x70, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00}, //79
            {0xF0, 0x88, 0x88, 0xF0, 0x80, 0x80, 0x00, 0x00}, //80
            {0x70, 0x88, 0x88, 0xA8, 0x90, 0x68, 0x00, 0x00}, //81
            {0xF0, 0x88, 0x88, 0xF0, 0xA0, 0x98, 0x00, 0x00}, //82
            {0x70, 0x80, 0x70, 0x08, 0x08, 0xF0, 0x00, 0x00}, //83
            {0xF8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00}, //84
            {0x88, 0x88, 0x88, 0x88, 0x88, 0x78, 0x00, 0x00}, //85
            {0x88, 0x88, 0x88, 0x50, 0x50, 0x20, 0x00, 0x00}, //86
            {0x88, 0x88, 0xA8, 0xA8, 0xA8, 0xD8, 0x00, 0x00}, //87
            {0x88, 0x50, 0x20, 0x50, 0x88, 0x88, 0x00, 0x00}, //88
            {0x88, 0x88, 0x70, 0x20, 0x20, 0x20, 0x00, 0x00}, //89
            {0xF8, 0x10, 0x20, 0x40, 0x80, 0xF8, 0x00, 0x00}, //90
            {0x70, 0x40, 0x40, 0x40, 0x40, 0x70, 0x00, 0x00}, //91
            {0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00}, //92
            {0x70, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00, 0x00}, //93
            {0x40, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //94
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00}, //95
            {0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //96
            {0x00, 0x00, 0x78, 0x88, 0x98, 0x68, 0x00, 0x00}, //97
            {0x80, 0x80, 0xF0, 0x88, 0x88, 0xF0, 0x00, 0x00}, //98
            {0x00, 0x00, 0x78, 0x80, 0x80, 0x78, 0x00, 0x00}, //99
            {0x08, 0x08, 0x78, 0x88, 0x88, 0x78, 0x00, 0x00}, //100
            {0x00, 0x00, 0x70, 0x98, 0xE0, 0x78, 0x00, 0x00}, //101
            {0x30, 0x48, 0x40, 0x40, 0xE0, 0x40, 0x40, 0x40}, //102
            {0x00, 0x00, 0x78, 0x88, 0x88, 0x78, 0x08, 0x70}, //103
            {0x80, 0x80, 0xF0, 0x88, 0x88, 0x88, 0x00, 0x00}, //104
            {0x20, 0x00, 0x60, 0x20, 0x20, 0x70, 0x00, 0x00}, //105
            {0x10, 0x00, 0x30, 0x10, 0x10, 0x10, 0x10, 0x60}, //106
            {0x80, 0x80, 0x98, 0xA0, 0xE0, 0x98, 0x00, 0x00}, //107
            {0xC0, 0x40, 0x40, 0x40, 0x40, 0x70, 0x00, 0x00}, //108
            {0x00, 0x00, 0xF0, 0xA8, 0xA8, 0xA8, 0x00, 0x00}, //109
            {0x00, 0x00, 0xF0, 0x88, 0x88, 0x88, 0x00, 0x00}, //110
            {0x00, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00}, //111
            {0x00, 0x00, 0xF0, 0x88, 0x88, 0xF0, 0x80, 0x80}, //112
            {0x00, 0x00, 0x78, 0x88, 0x88, 0x78, 0x08, 0x08}, //113
            {0x00, 0x00, 0xB8, 0xC0, 0x80, 0x80, 0x00, 0x00}, //114
            {0x00, 0x00, 0x78, 0xF0, 0x08, 0xF0, 0x00, 0x00}, //115
            {0x40, 0x40, 0xF0, 0x40, 0x48, 0x30, 0x00, 0x00}, //116
            {0x00, 0x00, 0x88, 0x88, 0x88, 0x78, 0x00, 0x00}, //117
            {0x00, 0x00, 0x88, 0x88, 0x50, 0x20, 0x00, 0x00}, //118
            {0x00, 0x00, 0x88, 0xA8, 0xA8, 0xD8, 0x00, 0x00}, //119
            {0x00, 0x00, 0xC8, 0x30, 0x60, 0x98, 0x00, 0x00}, //120
            {0x00, 0x00, 0x88, 0x88, 0x88, 0x78, 0x08, 0x70}, //121
            {0x00, 0x00, 0xF8, 0x30, 0x40, 0xF8, 0x00, 0x00}, //122
            {0x10, 0x20, 0x20, 0x40, 0x20, 0x20, 0x10, 0x00}, //123
            {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00}, //124
            {0x40, 0x20, 0x20, 0x10, 0x20, 0x20, 0x40, 0x00}, //125
            {0x50, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //126
            {0x00, 0x20, 0x50, 0x50, 0xF8, 0x00, 0x00, 0x00}, //127
            {0x70, 0x88, 0x80, 0x80, 0x88, 0x70, 0x20, 0x40}, //128
            {0x50, 0x00, 0x88, 0x88, 0x88, 0x78, 0x00, 0x00}, //129
            {0x08, 0x10, 0x70, 0x98, 0xE0, 0x78, 0x00, 0x00}, //130
            {0x20, 0x50, 0x78, 0x88, 0x98, 0x68, 0x00, 0x00}, //131
            {0x50, 0x00, 0x78, 0x88, 0x98, 0x68, 0x00, 0x00}, //132
            {0x40, 0x20, 0x78, 0x88, 0x98, 0x68, 0x00, 0x00}, //133
            {0x20, 0x00, 0x78, 0x88, 0x98, 0x68, 0x00, 0x00}, //134
            {0x00, 0x00, 0x78, 0x80, 0x80, 0x78, 0x20, 0x40}, //135
            {0x20, 0x50, 0x70, 0x98, 0xE0, 0x78, 0x00, 0x00}, //136
            {0x50, 0x00, 0x70, 0x98, 0xE0, 0x78, 0x00, 0x00}, //137
            {0x40, 0x20, 0x70, 0x98, 0xE0, 0x78, 0x00, 0x00}, //138
            {0x50, 0x00, 0x60, 0x20, 0x20, 0x70, 0x00, 0x00}, //139
            {0x20, 0x50, 0x60, 0x20, 0x20, 0x70, 0x00, 0x00}, //140
            {0x40, 0x20, 0x60, 0x20, 0x20, 0x70, 0x00, 0x00}, //141
            {0x50, 0x70, 0x88, 0x88, 0xF8, 0x88, 0x00, 0x00}, //142
            {0x20, 0x70, 0x88, 0x88, 0xF8, 0x88, 0x00, 0x00}, //143
            {0x18, 0xF8, 0x80, 0xE0, 0x80, 0xF8, 0x00, 0x00}, //144
            {0x00, 0x00, 0xD0, 0x68, 0xB0, 0xD8, 0x00, 0x00}, //145
            {0x78, 0xA0, 0xB0, 0xE0, 0xA0, 0xB8, 0x00, 0x00}, //146
            {0x20, 0x50, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00}, //147
            {0x50, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00}, //148
            {0x40, 0x20, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00}, //149
            {0x20, 0x50, 0x88, 0x88, 0x88, 0x78, 0x00, 0x00}, //150
            {0x40, 0x20, 0x88, 0x88, 0x88, 0x78, 0x00, 0x00}, //151
            {0x50, 0x00, 0x88, 0x88, 0x88, 0x78, 0x08, 0x70}, //152
            {0x50, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00}, //153
            {0x50, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00}, //154
            {0x20, 0x20, 0x78, 0x80, 0x80, 0x78, 0x20, 0x20}, //155
            {0x20, 0x50, 0x40, 0xE0, 0x40, 0x48, 0xB0, 0x00}, //156
            {0x88, 0x88, 0x50, 0xF8, 0x20, 0x70, 0x20, 0x00}, //157
            {0x80, 0xD0, 0xB0, 0xB0, 0xB8, 0xD0, 0x88, 0x80}, //158
            {0x38, 0x40, 0xF0, 0x40, 0xF0, 0x40, 0x38, 0x00}, //159
            {0x08, 0x10, 0x78, 0x88, 0x98, 0x68, 0x00, 0x00}, //160
            {0x10, 0x20, 0x60, 0x20, 0x20, 0x70, 0x00, 0x00}, //161
            {0x10, 0x20, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00}, //162
            {0x10, 0x20, 0x88, 0x88, 0x88, 0x78, 0x00, 0x00}, //163
            {0x28, 0x50, 0xF0, 0x88, 0x88, 0x88, 0x00, 0x00}, //164
            {0x28, 0xD0, 0xA8, 0xA8, 0x98, 0x88, 0x00, 0x00}, //165
            {0x00, 0x00, 0x78, 0x88, 0x98, 0x68, 0x00, 0x70}, //166
            {0x00, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00, 0x70}, //167
            {0x20, 0x00, 0x20, 0x60, 0x88, 0x70, 0x00, 0x00}, //168
            {0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00}, //169
            {0x00, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x00, 0x00}, //170
            {0x40, 0x48, 0x50, 0x30, 0x48, 0x90, 0x38, 0x00}, //171
            {0x40, 0x48, 0x50, 0x28, 0x58, 0xB8, 0x08, 0x00}, //172
            {0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00}, //173
            {0x00, 0x00, 0x00, 0x48, 0x90, 0x48, 0x00, 0x00}, //174
            {0x00, 0x00, 0x00, 0x90, 0x48, 0x90, 0x00, 0x00}, //175
            {0x28, 0x50, 0x70, 0x88, 0xF8, 0x88, 0x00, 0x00}, //176
            {0x28, 0x50, 0x78, 0x88, 0x98, 0x68, 0x00, 0x00}, //177
            {0x28, 0x50, 0x70, 0x20, 0x20, 0x70, 0x00, 0x00}, //178
            {0x28, 0x50, 0x60, 0x20, 0x20, 0x70, 0x00, 0x00}, //179
            {0x28, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00}, //180
            {0x28, 0x50, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00}, //181
            {0x28, 0x50, 0x88, 0x88, 0x88, 0x78, 0x00, 0x00}, //182
            {0x28, 0x50, 0x00, 0x88, 0x88, 0x78, 0x00, 0x00}, //183
            {0xFC, 0x48, 0x48, 0x48, 0x48, 0xE8, 0x08, 0x30}, //184
            {0x48, 0x00, 0xD8, 0x48, 0x48, 0xE8, 0x08, 0x30}, //185
            {0xE0, 0x68, 0x30, 0xE8, 0x58, 0xB8, 0x08, 0x00}, //186
            {0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //187
            {0x00, 0x20, 0x50, 0x88, 0x50, 0x20, 0x00, 0x00}, //188
            {0x00, 0x48, 0x50, 0x20, 0x68, 0xA8, 0x00, 0x00}, //189
            {0x7C, 0xA8, 0xA8, 0xA8, 0x68, 0x28, 0x28, 0x44}, //190
            {0x70, 0x80, 0x70, 0x88, 0x70, 0x08, 0x88, 0x70}, //191
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF}, //192
            {0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F}, //193
            {0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, //194
            {0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //195
            {0x00, 0x00, 0x00, 0x3C, 0x3C, 0x00, 0x00, 0x00}, //196
            {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00}, //197
            {0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0}, //198
            {0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0}, //199
            {0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC}, //200
            {0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03}, //201
            {0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F}, //202
            {0x11, 0x22, 0x44, 0x88, 0x11, 0x22, 0x44, 0x88}, //203
            {0x88, 0x44, 0x22, 0x11, 0x88, 0x44, 0x22, 0x11}, //204
            {0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00}, //205
            {0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7C, 0xFE}, //206
            {0x80, 0xC0, 0xE0, 0xF0, 0xE0, 0xC0, 0x80, 0x00}, //207
            {0x01, 0x03, 0x07, 0x0F, 0x07, 0x03, 0x01, 0x00}, //208
            {0xFF, 0x7E, 0x3C, 0x18, 0x18, 0x3C, 0x7E, 0xFF}, //209
            {0x81, 0xC3, 0xE7, 0xFF, 0xFF, 0xE7, 0xC3, 0x81}, //210
            {0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00}, //211
            {0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F}, //212
            {0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00}, //213
            {0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0}, //214
            {0x33, 0x33, 0xCC, 0xCC, 0x33, 0x33, 0xCC, 0xCC}, //215
            {0x00, 0x10, 0x28, 0x28, 0x7C, 0x00, 0x00, 0x00}, //216
            {0x10, 0x10, 0x38, 0x10, 0x38, 0x10, 0x10, 0x00}, //217
            {0x00, 0x00, 0x50, 0x88, 0xA8, 0x50, 0x00, 0x00}, //218
            {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, //219
            {0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF}, //220
            {0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}, //221
            {0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F}, //222
            {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00}, //223
            {0x00, 0x00, 0x68, 0x90, 0x90, 0x68, 0x00, 0x00}, //224
            {0x60, 0x90, 0xE0, 0x90, 0x90, 0xE0, 0x80, 0x00}, //225
            {0xF8, 0x88, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00}, //226
            {0xF8, 0x50, 0x50, 0x50, 0x50, 0x48, 0x80, 0x00}, //227
            {0xF8, 0x48, 0x20, 0x40, 0x88, 0xF8, 0x00, 0x00}, //228
            {0x00, 0x00, 0x78, 0x90, 0x88, 0x70, 0x00, 0x00}, //229
            {0x00, 0x00, 0x88, 0x88, 0xC8, 0xB0, 0x80, 0x80}, //230
            {0x00, 0x00, 0x50, 0x50, 0x20, 0x50, 0x50, 0x20}, //231
            {0x70, 0x20, 0x70, 0xA8, 0xA8, 0x70, 0x20, 0x70}, //232
            {0x70, 0x88, 0xF8, 0x88, 0x88, 0x70, 0x00, 0x00}, //233
            {0x70, 0x88, 0x88, 0x88, 0x50, 0xD8, 0x00, 0x00}, //234
            {0x30, 0x40, 0x30, 0x48, 0x48, 0x30, 0x00, 0x00}, //235
            {0x00, 0x00, 0x50, 0xA8, 0xA8, 0x50, 0x00, 0x00}, //236
            {0x00, 0x10, 0x70, 0xA8, 0xA8, 0x70, 0x40, 0x00}, //237
            {0x00, 0x70, 0x80, 0xE0, 0x80, 0x70, 0x00, 0x00}, //238
            {0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x00, 0x00}, //239
            {0x00, 0xF8, 0x00, 0xF8, 0x00, 0xF8, 0x00, 0x00}, //240
            {0x00, 0x20, 0x20, 0xF8, 0x20, 0x20, 0xF8, 0x00}, //241
            {0x00, 0xC0, 0x30, 0x08, 0x30, 0xC0, 0xF8, 0x00}, //242
            {0x00, 0x18, 0x60, 0x80, 0x60, 0x18, 0xF8, 0x00}, //243
            {0x00, 0x18, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20}, //244
            {0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00}, //245
            {0x00, 0x20, 0x00, 0xF8, 0x00, 0x20, 0x00, 0x00}, //246
            {0x00, 0x68, 0xB0, 0x00, 0x68, 0xB0, 0x00, 0x00}, //247
            {0x00, 0x30, 0x48, 0x48, 0x30, 0x00, 0x00, 0x00}, //248
            {0x00, 0x30, 0x78, 0x78, 0x30, 0x00, 0x00, 0x00}, //249
            {0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00}, //250
            {0x1C, 0x10, 0x10, 0x90, 0x50, 0x30, 0x10, 0x00}, //251
            {0xE0, 0x90, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00}, //252
            {0x60, 0x10, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00}, //253
            {0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00}, //254
            {0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55}, //255
        };

        enum Commands {

            SET_MEM_MODE        = 0x20,
            SET_COL_ADDR        = 0x21,
            SET_PAGE_ADDR       = 0x22,
            SET_HORIZ_SCROLL    = 0x26,
            SET_SCROLL          = 0x2E,

            SET_DISP_START_LINE = 0x40,

            SET_CONTRAST        = 0x81,
            SET_CHARGE_PUMP     = 0x8D,

            SET_SEG_REMAP       = 0xA0,
            SET_ENTIRE_ON       = 0xA4,
            SET_ALL_ON          = 0xA5,
            SET_NORM_DISP       = 0xA6,
            SET_INV_DISP        = 0xA7,
            SET_MUX_RATIO       = 0xA8,
            SET_DISP            = 0xAE,
            SET_COM_OUT_DIR     = 0xC0,
            SET_COM_OUT_DIR_FLIP = 0xC8,

            SET_DISP_OFFSET     = 0xD3,
            SET_DISP_CLK_DIV    = 0xD5,
            SET_PRECHARGE       = 0xD9,
            SET_COM_PIN_CFG     = 0xDA,
            SET_VCOM_DESEL      = 0xDB,
        };

        static constexpr uint8_t I2C_ADDR = 0x3C+0;

        //static constexpr uint8_t PAGE_HEIGHT = 8;
        //static constexpr uint8_t NUM_PAGES = HEIGHT / PAGE_HEIGHT;
        //static constexpr uint8_t BUF_LEN =(NUM_PAGES * WIDTH);

        //enum Mode { WRITE_MODE = 0xFE, READ_MODE = 0xFF };


        static void send_cmd(uint8_t cmd) {
            // I2C write process expects a control byte followed by data
            // this "data" can be a command or data to follow up a command
            // Co = 1, D/C = 0 => the driver expects a command
            uint8_t buf[2] = {0x80, cmd};
            I2C::write(I2C_ADDR, buf, 2);

        }

        static void write_data(uint8_t *buf, size_t len) {
            I2C::write(I2C_ADDR, buf, len);
        }

        static void init() {

            I2C::init();

            uint8_t cmds[] = {

                SET_DISP | 0x00,        // set display off

                SET_MEM_MODE,           // set memory address mode 0 = horizontal, 1 = vertical, 2 = page
                0x00,                           // horizontal addressing mode

                SET_DISP_START_LINE,    // set display start line to 0
                //SET_SEG_REMAP | 0x01,   // set segment re-map, column address 127 is mapped to SEG0

                SET_MUX_RATIO,          // set multiplex ratio
                HEIGHT - 1,             // Display height - 1

                //SET_COM_OUT_DIR | 0x08, // set COM (common) output scan direction. Scan from bottom up, COM[N-1] to COM0

                SET_DISP_OFFSET,        // set display offset
                0x00,                           // no offset

                SET_COM_PIN_CFG,        // set COM (common) pins hardware configuration. Board specific magic number.
                                        // 0x02 Works for 128x32, 0x12 Possibly works for 128x64. Other options 0x22, 0x32
                (HEIGHT == 32? 0x02 : 0x12),


                SET_DISP_CLK_DIV,       // set display clock divide ratio
                0x80,                           // div ratio of 1, standard freq
                SET_PRECHARGE,          // set pre-charge period
                0xF1,                           // Vcc internally generated on our board
                SET_VCOM_DESEL,         // set VCOMH deselect level
                0x30,                           // 0.83xVcc

                SET_CONTRAST,           // set contrast control
                0xFF,
                SET_ENTIRE_ON,          // set entire display on to follow RAM content
                SET_NORM_DISP,           // set normal (not inverted) display
                SET_CHARGE_PUMP,        // set charge pump
                0x14,                           // Vcc internally generated on our board
                SET_SCROLL | 0x00,      // deactivate horizontal scrolling if set. This is necessary as memory writes will corrupt if scrolling was enabled
                SET_DISP | 0x01,        // turn display on
            };
            
            for (auto &cmd : cmds)
                Private::send_cmd(cmd);

            SSD1306::locate(0,0);
            for (int i=0; i<16*4; i++)
                SSD1306::putchar(' ');
            SSD1306::locate(0,0);


        }
    }

    void init() { Private::init(); }

    void enable_display(bool on) {
        Private::send_cmd( Private::SET_DISP | uint8_t(on) );
    }

    void set_display_start_line(uint8_t line) {
        Private::send_cmd(Private::SET_DISP_START_LINE | ( line & 0x3F) );
    }

    void putchar(uint8_t idx) {

        uint8_t buf[9];
        buf[0] = 0x40;

        for (int i=0; i<8; i++) {
            buf[i+1] = 0;
            for (int j=0; j<8; j++) {
                buf[i+1] |= (int(!!( Private::font[idx][j] & (1<<(7-i)) )) << j); 
            }
        }

        Private::write_data(buf, 9);
    }

    void locate(uint8_t x, uint8_t y) {

        uint8_t cmds[] = {
            Private::SET_COL_ADDR,
            uint8_t(x<<3),
            WIDTH-1,
            Private::SET_PAGE_ADDR,
            y,
            HEIGHT-1,
        };

        for (auto &cmd : cmds)
            Private::send_cmd(cmd);

    }

    void set_invert(bool invert) {
        Private::send_cmd( invert ? Private::SET_INV_DISP : Private::SET_NORM_DISP );
    }

    void puts(const char *str) {
        while (*str) 
            SSD1306::putchar(*str++);
    }
}

